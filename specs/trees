sort node 30

left(n : node, m : node) v not left(n, m)
left(n : node, m : node), not left (n, m) => False

right(n : node, m : node) v not right (n, m)
right(n : node, m : node), not right (n, m) => False

leaf(n : node) v phrase(n)
leaf(n : node), phrase(n) => False

leaf(n : node), left(n, m : node) => False
leaf(n : node), right(n, m : node) => False

phrase(n : node), next(n : node, m: node) => left(n, m)

left(n : node, n) => False
right(n : node, n) => False

left(a: node, b : node), right(a, b) => False

left(n : node, m : node), before(m, n) => False
right(n : node, m : node), before(m, n) => False

left(n : node, m : node) => next(n, m)

left of (b : node, a : node), before(a, b) => False
left(a : node, b : node), right(a, c : node) => left of (b, c)
left of (a : node, b : node), left of (b : node, c : node) => left of (a, c)
left of(a : node, b : node), left of(b, a) => False

left(a : node, b : node), right(a, b) => False

phrase(a : node), not left(a, any : node) => False
phrase(a : node), not right(a, any : node) => False

right(a : node, b : node), right(c : node, b), a != c => False
right(a : node, b : node), left(c : node, b) => False
left(a : node, b : node), left(c : node, b), a != c => False
left(a : node, b : node), right(c : node, b) => False

right(a : node, b : node), right(a, c : node), b != c => False
left(a : node, b : node), left(a, b : node), b != c => False
