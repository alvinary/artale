// This grammar parses programs under the assumption
// that trailing whitespaces have been removed, and
// sequences of two or more whitespaces have been
// substituted by a single whitespace, so input strings
// must be preprocessed before being handed to the parser.

// Flat, simple rules where preferred over equivalent but
// more elegant recursive formulations to avoid nesting
// and simplify handling parser output.

start : NEWLINE* (sort NEWLINE*)+ (rule NEWLINE*)+

sort : "sort" WS token WS INT NEWLINE
     | "sort" WS token WS "add" WS (token "," WS)* token NEWLINE

rule : atoms WS "=>" WS atoms
     | atoms WS "=>" NEWLINE atoms

atoms : atom
      | (atom "," WS)* atom
      | (atom "," NEWLINE)* atom

atom : term "(" (term "," WS)* term ")"

term : token
     | (token ".")+ token

token : (WORD WS*)+

WORD: LETTER+ | ":"

%import common.LETTER
%import common.WS
%import common.NEWLINE
%import common.INT
